23.05.2016
- Suivi de la première partie du tutoriel sur le Tile Mapping "http://jeux.developpez.com/tutoriels/tile-mapping-construction-niveau/presentation-generale/"
  qui m'a permi de créer un niveau grâce à un Tile Set créé auparavant sur GIMP. Le résultat est un niveau que l'on peut afficher dans une fenêtre SDL de la
  taille souhaitée.
  - 1h45
  - Damien

- Suivi de la partie "Simple Personnage", "http://jeux.developpez.com/tutoriels/tile-mapping-construction-niveau/simple-personnage/"
  qui m'a permis de gérer les déplacements d'un rectangle (vert) dans une fenêtre SDL et qui vient percuter un rectangle (brun).
  Des problèmes de multiples exécutions des ".h" ont été rencontrés. Cela m'a fait prendre du retard.
  Solution : 
      #ifndef _monNomH
      #define _monNomH
        <code ici>
      #endif
  - 2h45
  - Emanuel
- Suivi de la première partie du tutoriel sur le "Scrolling" (Scrolling de la caméra), 
  "http://loka.developpez.com/tutoriel/sdl/scrolling/#LXIV-2", qui m'a permis de faire bouger un point dans une image de n'importe 
  quelle taille.
  - 2h
  - Pablo

30.05.2016
- Lecture de deux tutoriels sur l'intelligence artificielle dans les jeux vidéos de manière générale afin d'avoir une vue d'ensemble sur 
  le sujet et de savoir comment l'aborder de la bonne manière. Ils m'ont appris qu'une IA avait différentes phases (Passive, traque,
  attaque, fuite etc etc...) pendant lesquelles elle allait agire de manière différente. Ces phases sont gérées dans des fonctions.
  - https://software.intel.com/fr-fr/articles/two-brains-are-better-than-one
  - http://intel.developpez.com/tutoriels/jeux-video/concevoir-intelligence-artificielle/conception-implementation/
  - 1h
  - Damien
  
- Lecture et essai d'un tutoriel plus spécifié qui permet d'effectuer automatiquement certaines tâches en définissant un laps de temps
  auquel une action doit se répéter. Ce laps de temps est géré grâce aux fonctions SDL_GetTicks et SDL_PollEvent. Malheureusement,
  le tutoriel n'étant pas très détaillé et le code source ne fonctionnant pas, j'ai décidé d'abandonner ce tutoriel.
  - http://vally8.free.fr/coinprog/sdl/tut4/timer.php
  - 20 minutes
  - Damien

- Recherche d'images que j'ai modifiées et ajoutées aux tuiles existantes.
  J'ai rajouté à certaines un effet d'ombre qui permet une sorte de 2.5D.
  Une 2ème map est en cours de création avec un décor d'extérieur.
  - 3h
  - Emanuel

- Lecture de la première partie du tutoriel sur les animations sur le site "http://loka.developpez.com/tutoriel/sdl/animation/", 
  ce tutoriel m'a permis de mieux comprendre le concept des animations en utilisant une feuille de sprite.
  - 1h30
  - Pablo

31.05.2016
- Création d'un début de fonction permettant de faire se déplacer un élément en carré dans la map grâce à un changement de direction quand 
  sa position sur l'axe X ou Y dépasse une certaine valeure. La fonction n'est pas encore tout à fait finie mais il est désormais possible
  de choisir la direction de déplacement et un point d'arrêt.
  - 30 minutes
  - Damien

- Avancement dans le design, ajout de nouvelles tuiles et map extérieur.
  Séparation des maps dans un fichier externe ".h" ce qui facilite l'organisation.
  - 3h
  - Emanuel
  
- Suivi de la deuxième et dernière partie du tutoriel sur les animations. Après la lecture de ce chapitre, j'ai essayé d'implémenter 
  la même technique dans notre projet. J'ai recontré quelques inconvénients par rapport à la taille de l'image mais grâce à l'aide de 
  mes camarades j'ai réussi à comprendre et on a maintenant un personnage qui peut se déplacer vers la gauche et vers la droite.
  - 1h
  - Pablo

- Continuation du code permettant à un objet de se déplacer. Après pas mal de recherches sur internet dûes au fait que l'objet
  ne changeait pas de direction, il s'est finalement avéré que ce problême venait en fait d'une mauvaise formulation d'un if(){}
  qui donnait un cas qui ne se présentait jamais. Après correction de ce problème l'avancée a donc continuer. Grâce au rand, l'objet 
  fait maintenant un nombre définit de déplacements dans une direction aléatoire. Une fois qu'il a fait ses déplacements, le rand se 
  lance et en fonction de son résultat l'objet ira dans un sens ou un autre. Un dernier problème à résoudre et que l'objet ne change 
  pas de direction quand il atteint les bords de la map.
  - 1h30
  - Damien

01.06.2016
- Création d'un shuriken rotatif qui servira de piège par la suite.
  Intégration de sdlgfx.dll obligatoire. Cette nouvelle SDL est à ajouter avec la précédente. Elle est disponnible ici : 
  "http://www.aaroncox.net/tutorials/2dtutorials/sdlshapes.html" et fonctionne normalement avec Visual Studio mais est compatible 
  avec CodeBlocks.
  - 1h
  - Emanuel

02.06.2016
- Amélioration du code pour le déplacement de l'objet. Lorsqu'il atteint un bord de la map, il change de direction.
  - 10 minutes
  - Damien

03.06.2016
- Fusion du code du déplacement automatique avec celui du shuriken qui tourne.
 - 30 minutes
 - Principalement Manu petite aide de Damien
 
- Ajout d'un deuxième carré qui se déplace automatiquement ou d'un carré fixe dans le code pour essayer de faire que la programme
  s'arrête quand ils entrent en contact. Après plusieurs tentatives pour faire fonctionner la chose par moi même à l'aide d'un if
  et des coordonnées du bord d'un carré fixe, des coordonnées de ses coins ou d'un point sur un de ses côtés,  le programme fonctionne 
  mais pas à tous les coups. Afin de ne pas perdre plus de temps là dessus recherche d'un tutoriel sur internet.
  - 2h
  - Damien
  
- Lecture et compréhension des deux premiers chapitre du tutoriel "Chapitre XI : Détection et gestion des collisions avec SDL"
  de Loka.
  - http://loka.developpez.com/tutoriel/sdl/collision/
  - 30 minutes
  - Damien

- Tentative d'incrustation du shuriken dans la map déjà créée.
  - 3h
  - Emanuel

06.06.2016
- Application du tutoriel de Loka sur les collisions. Création d'un mur sur la map. Grâce à une fonction Bool on définit tous les cas
  où il n'y a pas collision. Si il n'y a pas collision, la fontion return false. Dans le cas contraire elle return true. On appelle
  ensuite la fonction dans la condition d'un if et on indique ce que l'on veut qu'il se passe dans le cas d'une collision.
  - http://loka.developpez.com/tutoriel/sdl/collision/
  - 1h30
  - Damien

- Amélioration de la réaction du carré qui se déplace seul lorsqu'il touche les bords. Jusqu'à présent, quand il était en contact avec
  un des bords de la map, le compteur du nombre de mouvement se mettait au max, ce qui entrainait un reset du rand et un reset du
  compteur. Le problème avec cette méthode était qu'il y avait une chance sur quatre que le carré reprenne dans la direction dans
  laquelle il allait et continue donc à sortir entrainant plus de reset etc. On observait des mouvements rapides du carré dans toutes
  les directions et parfois il restait bloqué ou sortait complétement de la map. J'ai donc modifié ceci en remplaçant le if unique par 
  quatre if reprenant chacun une des éventualité (sortie haut, sortie bas, sortie gauche, sortie droite). Maintenant, à la place de
  relancer un rand, quand le carré arrive très proche d'une des limites, il continue le compteur de mouvement là où il en est mais se
  déplace dans la direction opposée pour la fin ce qui l'éloigne du bord.
  - 15 minutes
  - Damien
  
